#!venv/bin/python
import logging
import asyncio
from random import randint
from aiogram import Bot, Dispatcher, executor, types
from aiogram.utils.exceptions import BotBlocked
from aiogram.dispatcher.filters import Text
from aiogram.utils.callback_data import CallbackData


# –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
bot = Bot(token="2110155617:AAH5S-s2IiX3NT5xnbYn5F9RSrqF4Z-n15M")
# –î–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è –±–æ—Ç–∞
dp = Dispatcher(bot)
# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# block
@dp.errors_handler(exception=BotBlocked)
async def error_bot_blocked(update: types.Update, exception: BotBlocked):
    # Update: –æ–±—ä–µ–∫—Ç —Å–æ–±—ã—Ç–∏—è –æ—Ç Telegram. Exception: –æ–±—ä–µ–∫—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∫–∞–∫-—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É, –Ω–∞–ø—Ä–∏–º–µ—Ä, —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    print(f"–ú–µ–Ω—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\n–°–æ–æ–±—â–µ–Ω–∏–µ: {update}\n–û—à–∏–±–∫–∞: {exception}")

    # –¢–∞–∫–æ–π —Ö—ç–Ω–¥–ª–µ—Ä –¥–æ–ª–∂–µ–Ω –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å True,
    # –µ—Å–ª–∏ –¥–∞–ª—å–Ω–µ–π—à–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.
    return True

@dp.message_handler(commands="block")
async def cmd_block(message: types.Message):
    await asyncio.sleep(10.0)  # –ó–¥–æ—Ä–æ–≤—ã–π —Å–æ–Ω –Ω–∞ 10 —Å–µ–∫—É–Ω–¥
    await message.reply("–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã")


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /test1
@dp.message_handler(commands="test1")
async def cmd_test1(message: types.Message):
    await message.reply("Test 1")

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /test2
@dp.message_handler(commands="test2")
async def cmd_test2(message: types.Message):
    await message.reply("Test 2")




# –æ–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç
@dp.message_handler(commands="answer")
async def cmd_answer(message: types.Message):
    await message.answer("–≠—Ç–æ –ø—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")


# –æ—Ç–≤–µ—Ç –ø–µ—Ä–µ—Å—ã–ª–∫–æ–π
@dp.message_handler(commands="reply")
async def cmd_reply(message: types.Message):
    await message.reply('–≠—Ç–æ –æ—Ç–≤–µ—Ç —Å "–æ—Ç–≤–µ—Ç–æ–º"')



@dp.message_handler(commands="dice")
async def cmd_dice(message: types.Message):
    await message.answer_dice(emoji="üé≤")



# from aiogram import types
@dp.message_handler(commands="dio")
async def cmd_start(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["–° –ø—é—Ä–µ—à–∫–æ–π", "–ë–µ–∑ –ø—é—Ä–µ—à–∫–∏"]
    keyboard.add(*buttons)
    await message.answer("–ö–∞–∫ –ø–æ–¥–∞–≤–∞—Ç—å –∫–æ—Ç–ª–µ—Ç—ã?", reply_markup=keyboard)


# from aiogram.dispatcher.filters import Text
@dp.message_handler(Text(equals="–° –ø—é—Ä–µ—à–∫–æ–π"))
async def with_puree(message: types.Message):
    await message.reply("–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä!")


@dp.message_handler(lambda message: message.text == "–ë–µ–∑ –ø—é—Ä–µ—à–∫–∏")
async def without_puree(message: types.Message):
    await message.reply("–¢–∞–∫ –Ω–µ–≤–∫—É—Å–Ω–æ!")



# special buttons
@dp.message_handler(commands="special_buttons")
async def cmd_special_buttons(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton(text="–ó–∞–ø—Ä–æ—Å–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True))
    keyboard.add(types.KeyboardButton(text="–ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", request_contact=True))
    keyboard.add(types.KeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É",
                                      request_poll=types.KeyboardButtonPollType(type=types.PollType.QUIZ)))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)


# inline buttons
@dp.message_handler(commands="inline_url")
async def cmd_inline_url(message: types.Message):
    buttons = [
        types.InlineKeyboardButton(text="GitHub", url="https://github.com"),
        types.InlineKeyboardButton(text="–û—Ñ. –∫–∞–Ω–∞–ª Telegram", url="tg://resolve?domain=telegram")
    ]
    keyboard = types.InlineKeyboardMarkup(row_width=1) # row_width —É–±—Ä–∞—Ç—å –µ—Å–ª–∏ –≤ —Ä—è–¥
    keyboard.add(*buttons)
    await message.answer("–ö–Ω–æ–ø–∫–∏-—Å—Å—ã–ª–∫–∏", reply_markup=keyboard)


# callback
@dp.message_handler(commands="random")
async def cmd_random(message: types.Message):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="–ù–∞–∂–º–∏ –º–µ–Ω—è", callback_data="random_value"))
    await message.answer("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10", reply_markup=keyboard)

@dp.callback_query_handler(text="random_value")
async def send_random_value(call: types.CallbackQuery):
    await call.message.answer(str(randint(1, 10)))
    await call.answer(text="–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –±–æ—Ç–æ–º!", show_alert=True)
    # –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ await call.answer()





# –ó–¥–µ—Å—å —Ö—Ä–∞–Ω—è—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ.
# –¢.–∫. —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å –≤ –ø–∞–º—è—Ç–∏, —Ç–æ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –æ–Ω –æ—á–∏—Å—Ç–∏—Ç—Å—è
user_data = {}

def get_keyboard():
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
    buttons = [
        types.InlineKeyboardButton(text="-1", callback_data="num_decr"),
        types.InlineKeyboardButton(text="+1", callback_data="num_incr"),
        types.InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="num_finish")
    ]
    # –ë–ª–∞–≥–æ–¥–∞—Ä—è row_width=2, –≤ –ø–µ—Ä–≤–æ–º —Ä—è–¥—É –±—É–¥–µ—Ç –¥–≤–µ –∫–Ω–æ–ø–∫–∏, –∞ –æ—Å—Ç–∞–≤—à–∞—è—Å—è –æ–¥–Ω–∞
    # —É–π–¥—ë—Ç –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(*buttons)
    return keyboard

async def update_num_text(message: types.Message, new_value: int):
    # –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ç–æ–π –∂–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    await message.edit_text(f"–£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ: {new_value}", reply_markup=get_keyboard())

@dp.message_handler(commands="numbers")
async def cmd_numbers(message: types.Message):
    user_data[message.from_user.id] = 0
    await message.answer("–£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ: 0", reply_markup=get_keyboard())

@dp.callback_query_handler(Text(startswith="num_"))
async def callbacks_num(call: types.CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ª–∏–±–æ —Å—á–∏—Ç–∞–µ–º –µ–≥–æ —Ä–∞–≤–Ω—ã–º 0
    user_value = user_data.get(call.from_user.id, 0)
    # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä `num_incr` -> `incr`
    action = call.data.split("_")[1]
    if action == "incr":
        user_data[call.from_user.id] = user_value+1
        await update_num_text(call.message, user_value+1)
    elif action == "decr":
        user_data[call.from_user.id] = user_value-1
        await update_num_text(call.message, user_value-1)
    elif action == "finish":
        # –ï—Å–ª–∏ –±—ã –º—ã –Ω–µ –º–µ–Ω—è–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–æ –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        # –≤—ã–∑–æ–≤–æ–º await call.message.delete_reply_markup().
        # –ù–æ —Ç.–∫. –º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, 
        # —Ç–æ –æ–Ω–∞ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞ –∏ —Ç–∞–∫.
        await call.message.edit_text(f"–ò—Ç–æ–≥–æ: {user_value}")
    # –ù–µ –∑–∞–±—ã–≤–∞–µ–º –æ—Ç—á–∏—Ç–∞—Ç—å—Å—è –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–±—ç–∫–∞
    await call.answer()





# from aiogram.utils.callback_data import CallbackData
cb= CallbackData("post", "id", "action")

button =  types.InlineKeyboardButton(
    text="–õ–∞–π–∫–Ω—É—Ç—å", 
    callback_data=cb.new(id=5, action="like")
)

@dp.callback_query_handler(cb.filter())
async def callbacks(call: types.CallbackQuery, callback_data: dict):
    post_id = callback_data["id"]
    action = callback_data["action"]



# fabnum - –ø—Ä–µ—Ñ–∏–∫—Å, action - –Ω–∞–∑–≤–∞–Ω–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–º –±—É–¥–µ–º –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ
callback_numbers = CallbackData("fabnum", "action")


def get_keyboard_fab():
    buttons = [
        types.InlineKeyboardButton(text="-1", callback_data=callback_numbers.new(action="decr")),
        types.InlineKeyboardButton(text="+1", callback_data=callback_numbers.new(action="incr")),
        types.InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=callback_numbers.new(action="finish"))
    ]
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(*buttons)
    return keyboard


async def update_num_text_fab(message: types.Message, new_value: int):
    with suppress(MessageNotModified):
        await message.edit_text(f"–£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ: {new_value}", reply_markup=get_keyboard_fab())


@dp.message_handler(commands="numbers_fab")
async def cmd_numbers(message: types.Message):
    user_data[message.from_user.id] = 0
    await message.answer("–£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ: 0", reply_markup=get_keyboard_fab())


@dp.callback_query_handler(callback_numbers.filter(action=["incr", "decr"]))
async def callbacks_num_change_fab(call: types.CallbackQuery, callback_data: dict):
    user_value = user_data.get(call.from_user.id, 0)
    action = callback_data["action"]
    if action == "incr":
        user_data[call.from_user.id] = user_value + 1
        await update_num_text_fab(call.message, user_value + 1)
    elif action == "decr":
        user_data[call.from_user.id] = user_value - 1
        await update_num_text_fab(call.message, user_value - 1)
    await call.answer()


@dp.callback_query_handler(callback_numbers.filter(action=["finish"]))
async def callbacks_num_finish_fab(call: types.CallbackQuery):
    user_value = user_data.get(call.from_user.id, 0)
    await call.message.edit_text(f"–ò—Ç–æ–≥–æ: {user_value}")
    await call.answer()



# –¥–∏–∞–ª–æ–≥ 
user1_chat_id = "chat_id"
user2_chat_id = "chat_id"

# @bot.message_handler(content_types=["text"])
# def messanger(message):
#     if message.from_user.chat_id == user1_chat_id:
#         bot.send_message(user2_chat_id, message.text)
#     else:
#         bot.send_message(user1_chat_id, message.text)


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    executor.start_polling(dp, skip_updates=True)
